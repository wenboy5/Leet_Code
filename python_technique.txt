"".join()
reversed() return an iterable
list.pop() 同时 +
if s is a str;   no need to convert to a list;   use s[0]
quicksort O(nlogn) quickselect average O(n) worst O(n**2)
list.insert(pos,item) insert after that position
in-place modification cannot use pop() insert()
string.find(value, start, end) return the first position if not find return -1
Python also allows us to use the else condition with for loops. The else block just after for/while is executed only when the loop is NOT terminated by a break statement. Such type of else is useful only if there is an if condition present inside the loop which somehow depends on the loop variable. 
sort alters the original list. sorted create a new list.
dict.get(key) return value
heapq.nlargest(k,iterable,key) key is a call back function
Using no () means to fetch the function to be passed along as a callback.
from collections import Counter  Counter returns a dic .most_common(k)
list[n-k:] n-k is a whole
list.remove()	Removes the first item with the specified value
l = [0 for i in range(5)]
l = [0] * 5
list.inert(pos,item) 把东西放到了pos位置上
float('inf')
-math.inf
set.add()
list.count(element)
reverse a string  txt = "Hello World"[::-1] 
ascii `= 96 a=97 z=122
list.index(value,start)
s= "123" s[0:10] is still "123"

>>> # Sort the list and assign to new variable
>>> sorted_values = values_to_sort.sort()
>>> print(sorted_values)
None

values = a_dict.values()

python set remove
# language set
language = {'English', 'French', 'German'}
# removing 'German' from language
language.remove('German')

python list remove
# animals list
animals = ['cat', 'dog', 'rabbit', 'guinea pig']
# Deleting 'fish' element
animals.remove('fish')

"1.4.23.4".split(".")
.strip("0") .rstrip() .lstrip()

list insert
list.insert(pos,value)

python pop
a = pop(-1)

Counter('abracadabra').most_common(3)
[('a', 5), ('b', 2), ('r', 2)]

re.split(r"\W",stringg)

sort     can depend on the item on a list

linklist question alwasy consider whether head == None
set can do add and minus
set.update() adding items from other iterables.